// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    // The C instrunction has: 
    // 1. 3 bits for the destination
    // 2. 7 bits for the computation
    // 3. 3 bits for the jump
    // The A instruction has 15 bits for the address
    // The instruction is 16 bits long
    // The MSB bit is 0 for A instruction and 1 for C instruction

    PARTS:
    // Figure out the type of instruction we're getting
    // We can tell from the MSB bit of the instruction
    // If it's 0, it's an A-instruction
    // If it's 1, it's a C-instruction
    Not(in=instruction[15], out=isAInstruction);

    // Instruction Zone
    Mux16(a=ALUout, b=instruction, sel=isAInstruction, out=A_MuxOut);
    ARegister(in=A_MuxOut, load=c, out=A_RegisterOut, out=addressM);

    DRegister(in=ALUout, load=c, out=D_RegisterOut);
    Mux16(a=A_RegisterOut, b=inM, sel=c, out=B_MuxOut);

    ALU(x=D_RegisterOut, y=B_MuxOut, zx=, nx=, zy=, ny=, f=, no=, out=ALUout, out=outM, zr=, ng=);

    PC(in=A_RegisterOut, load=reset, inc=true, reset=reset, out[0..14]=pc);
}
